//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.12.6284.27589 (NJsonSchema v8.11.6284.26855) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace CommunityBridge2.WebServiceAnswers.Swagger
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class ContentStatisticsClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Records thread statistics.</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="recordContentStatistics">The record page view entity.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> RecordThreadStatisticsAsyncAsync(System.Guid threadkey, RecordContentStatistics recordContentStatistics)
        {
            return RecordThreadStatisticsAsyncAsync(threadkey, recordContentStatistics, System.Threading.CancellationToken.None);
        }

        /// <summary>Records thread statistics.</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="recordContentStatistics">The record page view entity.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> RecordThreadStatisticsAsyncAsync(System.Guid threadkey, RecordContentStatistics recordContentStatistics, System.Threading.CancellationToken cancellationToken)
        {
            if (threadkey == null)
                throw new System.ArgumentNullException("threadkey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadkey}/counters");
            urlBuilder_.Replace("{threadkey}", System.Uri.EscapeDataString(threadkey.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(recordContentStatistics));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class DictionaryClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Gets the DictionaryItems based on the provided keys.</summary>
        /// <param name="keys">Comma seperated list of keys.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> GetDictionaryItemsAsync(string keys)
        {
            return GetDictionaryItemsAsync(keys, System.Threading.CancellationToken.None);
        }

        /// <summary>Gets the DictionaryItems based on the provided keys.</summary>
        /// <param name="keys">Comma seperated list of keys.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> GetDictionaryItemsAsync(string keys, System.Threading.CancellationToken cancellationToken)
        {
            if (keys == null)
                throw new System.ArgumentNullException("keys");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/dictionaryitems?");
            urlBuilder_.Append("keys=").Append(System.Uri.EscapeDataString(keys.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class ForumClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Get forums for current user</summary>
        /// <param name="languageLocale">The language locale</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Forum2017>> GetForumsByLocaleAsyncAsync(string languageLocale)
        {
            return GetForumsByLocaleAsyncAsync(languageLocale, System.Threading.CancellationToken.None);
        }

        /// <summary>Get forums for current user</summary>
        /// <param name="languageLocale">The language locale</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Forum2017>> GetForumsByLocaleAsyncAsync(string languageLocale, System.Threading.CancellationToken cancellationToken)
        {
            if (languageLocale == null)
                throw new System.ArgumentNullException("languageLocale");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/forums/{languageLocale}");
            urlBuilder_.Replace("{languageLocale}", System.Uri.EscapeDataString(languageLocale.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Forum2017>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Forum2017>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Forum2017>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class MessageClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>For the specified thread in the thread collection, gets a message with the specified message key.</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="messagekey">The message key.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Message> GetAsync(System.Guid threadkey, System.Guid messagekey)
        {
            return GetAsync(threadkey, messagekey, System.Threading.CancellationToken.None);
        }

        /// <summary>For the specified thread in the thread collection, gets a message with the specified message key.</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="messagekey">The message key.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Message> GetAsync(System.Guid threadkey, System.Guid messagekey, System.Threading.CancellationToken cancellationToken)
        {
            if (threadkey == null)
                throw new System.ArgumentNullException("threadkey");

            if (messagekey == null)
                throw new System.ArgumentNullException("messagekey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadkey}/messages/{messagekey}");
            urlBuilder_.Replace("{threadkey}", System.Uri.EscapeDataString(threadkey.ToString()));
            urlBuilder_.Replace("{messagekey}", System.Uri.EscapeDataString(messagekey.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Message);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(Message);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Creates a message.</summary>
        /// <param name="message">The Message instance.</param>
        /// <returns>Message Created Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MessageCreateReply> CreateAsyncAsync(Message message)
        {
            return CreateAsyncAsync(message, System.Threading.CancellationToken.None);
        }

        /// <summary>Creates a message.</summary>
        /// <param name="message">The Message instance.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Message Created Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MessageCreateReply> CreateAsyncAsync(Message message, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/messages");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(message));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "201")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(MessageCreateReply);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MessageCreateReply>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied", status_, responseData_, headers_, null);
                        }
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Intenal Server Error", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(MessageCreateReply);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Update message counter</summary>
        /// <param name="threadkey">The thread key</param>
        /// <param name="messagekey">The message key</param>
        /// <param name="counter">The counter name</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> UpdateCounterAsync(System.Guid threadkey, System.Guid messagekey, string counter)
        {
            return UpdateCounterAsync(threadkey, messagekey, counter, System.Threading.CancellationToken.None);
        }

        /// <summary>Update message counter</summary>
        /// <param name="threadkey">The thread key</param>
        /// <param name="messagekey">The message key</param>
        /// <param name="counter">The counter name</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> UpdateCounterAsync(System.Guid threadkey, System.Guid messagekey, string counter, System.Threading.CancellationToken cancellationToken)
        {
            if (threadkey == null)
                throw new System.ArgumentNullException("threadkey");

            if (messagekey == null)
                throw new System.ArgumentNullException("messagekey");

            if (counter == null)
                throw new System.ArgumentNullException("counter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadkey}/messages/{messagekey}/counters/{counter}");
            urlBuilder_.Replace("{threadkey}", System.Uri.EscapeDataString(threadkey.ToString()));
            urlBuilder_.Replace("{messagekey}", System.Uri.EscapeDataString(messagekey.ToString()));
            urlBuilder_.Replace("{counter}", System.Uri.EscapeDataString(counter.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>For the specified thread in the thread collection, gets list of all messages</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="messagekey">Optional message key for which message page needs to be pulled.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PagedResultOfIResource> GetListAsync(System.Guid threadkey, string messagekey, int? paging_start, int? paging_count, string sorting_orderBy, Direction? sorting_direction)
        {
            return GetListAsync(threadkey, messagekey, paging_start, paging_count, sorting_orderBy, sorting_direction, System.Threading.CancellationToken.None);
        }

        /// <summary>For the specified thread in the thread collection, gets list of all messages</summary>
        /// <param name="threadkey">The thread key.</param>
        /// <param name="messagekey">Optional message key for which message page needs to be pulled.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PagedResultOfIResource> GetListAsync(System.Guid threadkey, string messagekey, int? paging_start, int? paging_count, string sorting_orderBy, Direction? sorting_direction, System.Threading.CancellationToken cancellationToken)
        {
            if (threadkey == null)
                throw new System.ArgumentNullException("threadkey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadkey}/messages?");
            urlBuilder_.Replace("{threadkey}", System.Uri.EscapeDataString(threadkey.ToString()));
            if (messagekey != null) urlBuilder_.Append("messagekey=").Append(System.Uri.EscapeDataString(messagekey.ToString())).Append("&");
            if (paging_start != null) urlBuilder_.Append("paging.start=").Append(System.Uri.EscapeDataString(paging_start.Value.ToString())).Append("&");
            if (paging_count != null) urlBuilder_.Append("paging.count=").Append(System.Uri.EscapeDataString(paging_count.Value.ToString())).Append("&");
            if (sorting_orderBy != null) urlBuilder_.Append("sorting.orderBy=").Append(System.Uri.EscapeDataString(sorting_orderBy.ToString())).Append("&");
            if (sorting_direction != null) urlBuilder_.Append("sorting.direction=").Append(System.Uri.EscapeDataString(sorting_direction.Value.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(PagedResultOfIResource);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfIResource>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(PagedResultOfIResource);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get message counter for given message within given thread</summary>
        /// <param name="threadkey">The thread key</param>
        /// <param name="messagekey">The message key</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetCounterAsync(System.Guid threadkey, System.Guid messagekey)
        {
            return GetCounterAsync(threadkey, messagekey, System.Threading.CancellationToken.None);
        }

        /// <summary>Get message counter for given message within given thread</summary>
        /// <param name="threadkey">The thread key</param>
        /// <param name="messagekey">The message key</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetCounterAsync(System.Guid threadkey, System.Guid messagekey, System.Threading.CancellationToken cancellationToken)
        {
            if (threadkey == null)
                throw new System.ArgumentNullException("threadkey");

            if (messagekey == null)
                throw new System.ArgumentNullException("messagekey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadkey}/messages/{messagekey}/counter");
            urlBuilder_.Replace("{threadkey}", System.Uri.EscapeDataString(threadkey.ToString()));
            urlBuilder_.Replace("{messagekey}", System.Uri.EscapeDataString(messagekey.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Updates message by applying a series of Message actions.</summary>
        /// <param name="threadKey">Thread key underwhich the Message resides.</param>
        /// <param name="messageKey">MessageKey to apply actions on.</param>
        /// <param name="messageAction">Message Action object - MessageActionType and Attributes</param>
        /// <returns>Content Updated Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PerformMessageActionsAsyncAsync(System.Guid threadKey, System.Guid messageKey, MessageAction messageAction)
        {
            return PerformMessageActionsAsyncAsync(threadKey, messageKey, messageAction, System.Threading.CancellationToken.None);
        }

        /// <summary>Updates message by applying a series of Message actions.</summary>
        /// <param name="threadKey">Thread key underwhich the Message resides.</param>
        /// <param name="messageKey">MessageKey to apply actions on.</param>
        /// <param name="messageAction">Message Action object - MessageActionType and Attributes</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Content Updated Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PerformMessageActionsAsyncAsync(System.Guid threadKey, System.Guid messageKey, MessageAction messageAction, System.Threading.CancellationToken cancellationToken)
        {
            if (threadKey == null)
                throw new System.ArgumentNullException("threadKey");

            if (messageKey == null)
                throw new System.ArgumentNullException("messageKey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadKey}/messages/{messageKey}");
            urlBuilder_.Replace("{threadKey}", System.Uri.EscapeDataString(threadKey.ToString()));
            urlBuilder_.Replace("{messageKey}", System.Uri.EscapeDataString(messageKey.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(messageAction));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class SearchClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Queries the content</summary>
        /// <param name="filter">Filter options based on OData expression syntax https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search</param>
        /// <param name="orderBy">Order by OData expression syntax</param>
        /// <param name="top">Top</param>
        /// <param name="skip">Skip</param>
        /// <param name="search">Search Term</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PagedResultOfContent> QueryAsync(string filter, string orderBy, int? top, int? skip, string search)
        {
            return QueryAsync(filter, orderBy, top, skip, search, System.Threading.CancellationToken.None);
        }

        /// <summary>Queries the content</summary>
        /// <param name="filter">Filter options based on OData expression syntax https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search</param>
        /// <param name="orderBy">Order by OData expression syntax</param>
        /// <param name="top">Top</param>
        /// <param name="skip">Skip</param>
        /// <param name="search">Search Term</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PagedResultOfContent> QueryAsync(string filter, string orderBy, int? top, int? skip, string search, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/search?");
            urlBuilder_.Append("$filter=").Append(System.Uri.EscapeDataString(filter.ToString())).Append("&");
            if (orderBy != null) urlBuilder_.Append("$orderBy=").Append(System.Uri.EscapeDataString(orderBy.ToString())).Append("&");
            if (top != null) urlBuilder_.Append("$top=").Append(System.Uri.EscapeDataString(top.Value.ToString())).Append("&");
            if (skip != null) urlBuilder_.Append("$skip=").Append(System.Uri.EscapeDataString(skip.Value.ToString())).Append("&");
            if (search != null) urlBuilder_.Append("$search=").Append(System.Uri.EscapeDataString(search.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(PagedResultOfContent);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfContent>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(PagedResultOfContent);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class ThreadsClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Retrieves Content / Thread for the given key.</summary>
        /// <param name="key">Thread Key of type {System.Guid}</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Content> GetAsyncAsync(System.Guid key)
        {
            return GetAsyncAsync(key, System.Threading.CancellationToken.None);
        }

        /// <summary>Retrieves Content / Thread for the given key.</summary>
        /// <param name="key">Thread Key of type {System.Guid}</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Content> GetAsyncAsync(System.Guid key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{key}");
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(key.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Content);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Unauthorized", status_, responseData_, headers_, null);
                        }
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied for the Content", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Content Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(Content);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Queries the content</summary>
        /// <param name="filter">Filter options based on OData expression syntax https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search</param>
        /// <param name="orderBy">Order by OData expression syntax</param>
        /// <param name="top">Top</param>
        /// <param name="skip">Skip</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PagedResultOfContent> QueryAsyncAsync(string filter, string orderBy, int? top, int? skip)
        {
            return QueryAsyncAsync(filter, orderBy, top, skip, System.Threading.CancellationToken.None);
        }

        /// <summary>Queries the content</summary>
        /// <param name="filter">Filter options based on OData expression syntax https://docs.microsoft.com/en-us/rest/api/searchservice/odata-expression-syntax-for-azure-search</param>
        /// <param name="orderBy">Order by OData expression syntax</param>
        /// <param name="top">Top</param>
        /// <param name="skip">Skip</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PagedResultOfContent> QueryAsyncAsync(string filter, string orderBy, int? top, int? skip, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads?");
            urlBuilder_.Append("$filter=").Append(System.Uri.EscapeDataString(filter.ToString())).Append("&");
            if (orderBy != null) urlBuilder_.Append("$orderBy=").Append(System.Uri.EscapeDataString(orderBy.ToString())).Append("&");
            if (top != null) urlBuilder_.Append("$top=").Append(System.Uri.EscapeDataString(top.Value.ToString())).Append("&");
            if (skip != null) urlBuilder_.Append("$skip=").Append(System.Uri.EscapeDataString(skip.Value.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(PagedResultOfContent);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfContent>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(PagedResultOfContent);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Creates a new thread / content after validation</summary>
        /// <param name="content">Content object {Microsoft.Support.Community.Services.CommunityApi.Presentation.Content}</param>
        /// <returns>Content Created Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CreateAsyncAsync(Content content)
        {
            return CreateAsyncAsync(content, System.Threading.CancellationToken.None);
        }

        /// <summary>Creates a new thread / content after validation</summary>
        /// <param name="content">Content object {Microsoft.Support.Community.Services.CommunityApi.Presentation.Content}</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Content Created Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateAsyncAsync(Content content, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(content));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get the list of subscribers who have Subscribed to the Contentkeys</summary>
        /// <param name="keys">string representing comma delimited content keys</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> GetSubscribersAsyncAsync(string keys)
        {
            return GetSubscribersAsyncAsync(keys, System.Threading.CancellationToken.None);
        }

        /// <summary>Get the list of subscribers who have Subscribed to the Contentkeys</summary>
        /// <param name="keys">string representing comma delimited content keys</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<object>> GetSubscribersAsyncAsync(string keys, System.Threading.CancellationToken cancellationToken)
        {
            if (keys == null)
                throw new System.ArgumentNullException("keys");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/subscribers?");
            urlBuilder_.Append("keys=").Append(System.Uri.EscapeDataString(keys.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<object>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<object>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Updates content by applying a content action.</summary>
        /// <param name="threadKey">Thread key to apply actions on.</param>
        /// <param name="contentAction">{Microsoft.Support.Community.Services.CommunityApi.Presentation.ContentAction} entity with required attributes set.</param>
        /// <returns>Content Updated Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PerformContentActionsAsyncAsync(System.Guid threadKey, ContentAction contentAction)
        {
            return PerformContentActionsAsyncAsync(threadKey, contentAction, System.Threading.CancellationToken.None);
        }

        /// <summary>Updates content by applying a content action.</summary>
        /// <param name="threadKey">Thread key to apply actions on.</param>
        /// <param name="contentAction">{Microsoft.Support.Community.Services.CommunityApi.Presentation.ContentAction} entity with required attributes set.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Content Updated Successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> PerformContentActionsAsyncAsync(System.Guid threadKey, ContentAction contentAction, System.Threading.CancellationToken cancellationToken)
        {
            if (threadKey == null)
                throw new System.ArgumentNullException("threadKey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/threads/{threadKey}");
            urlBuilder_.Replace("{threadKey}", System.Uri.EscapeDataString(threadKey.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contentAction));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public partial class UserClient
    {
        private string _baseUrl = "https://lite.community.support.microsoft.com";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient request, System.Net.Http.HttpResponseMessage response);

        /// <summary>Gets User by user id.</summary>
        /// <param name="key">The key.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<User> GetAsync(System.Guid key)
        {
            return GetAsync(key, System.Threading.CancellationToken.None);
        }

        /// <summary>Gets User by user id.</summary>
        /// <param name="key">The key.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User> GetAsync(System.Guid key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/users/{key}");
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(key.ToString()));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(User);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<User>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Validation Errors", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied to view the user", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("User Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(User);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Queries the User.</summary>
        /// <param name="filter">Filter options based on OData expression syntax.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<User>> QueryAsync(string filter)
        {
            return QueryAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <summary>Queries the User.</summary>
        /// <param name="filter">Filter options based on OData expression syntax.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<User>> QueryAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/api/users?");
            urlBuilder_.Append("$filter=").Append(System.Uri.EscapeDataString(filter.ToString())).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    PrepareRequest(client_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    PrepareRequest(client_, url_);

                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<User>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<User>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<User>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class RecordContentStatistics
    {
        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecordContentStatisticsContentType? ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ContentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("StatisticsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecordContentStatisticsStatisticsType? StatisticsType { get; set; }

        [Newtonsoft.Json.JsonProperty("ForumId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ForumId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecordContentStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordContentStatistics>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class Message
    {
        [Newtonsoft.Json.JsonProperty("MessageKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? MessageKey { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CreatedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("HelpfulVoteCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HelpfulVoteCount { get; set; }

        [Newtonsoft.Json.JsonProperty("IsHidden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHidden { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("IsAnswer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAnswer { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ModifiedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ReplyToMessageKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ReplyToMessageKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ContentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Counter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageCounter Counter { get; set; }

        /// <summary>
        /// Optional the thread
        /// </summary>
        public Content OptThread { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Message FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Key { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Affiliations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Affiliations { get; set; }

        [Newtonsoft.Json.JsonProperty("Awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserAward> Awards { get; set; }

        [Newtonsoft.Json.JsonProperty("Roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserRole> Roles { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedByUserKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? CreatedByUserKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifiedByUserKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ModifiedByUserKey { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }

        [Newtonsoft.Json.JsonProperty("IsMarkedAsAbused", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMarkedAsAbused { get; set; }

        [Newtonsoft.Json.JsonProperty("IsImageHidden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsImageHidden { get; set; }

        [Newtonsoft.Json.JsonProperty("IsProfileHidden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProfileHidden { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("InSpamReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InSpamReview { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRetired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRetired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsBanned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBanned { get; set; }

        [Newtonsoft.Json.JsonProperty("UserLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("Authentications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserAuthentication> Authentications { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailNotificationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmailNotificationFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCheckedWindowsInsider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCheckedWindowsInsider { get; set; }

        [Newtonsoft.Json.JsonProperty("BestBetsSearchEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BestBetsSearchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("UserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserPreference UserPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("UserProfileImageCoordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserProfileImageCoordinates UserProfileImageCoordinates { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class MessageCounter
    {
        [Newtonsoft.Json.JsonProperty("ContentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ContentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? MessageKey { get; set; }

        [Newtonsoft.Json.JsonProperty("HelpfulVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HelpfulVotes { get; set; }

        [Newtonsoft.Json.JsonProperty("UnhelpfulVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UnhelpfulVotes { get; set; }

        [Newtonsoft.Json.JsonProperty("SolutionVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SolutionVotes { get; set; }

        [Newtonsoft.Json.JsonProperty("AnonymousSolutionVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AnonymousSolutionVotes { get; set; }

        [Newtonsoft.Json.JsonProperty("Replies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Replies { get; set; }

        [Newtonsoft.Json.JsonProperty("AbuseReports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AbuseReports { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MessageCounter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageCounter>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class UserAward
    {
        [Newtonsoft.Json.JsonProperty("ForumId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ForumId { get; set; }

        [Newtonsoft.Json.JsonProperty("AwardName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwardName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserAward FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAward>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class UserRole
    {
        [Newtonsoft.Json.JsonProperty("ForumId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ForumId { get; set; }

        [Newtonsoft.Json.JsonProperty("ForumShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForumShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("RoleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoleName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRole>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class UserAuthentication
    {
        [Newtonsoft.Json.JsonProperty("AuthenticationProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthenticationProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserAuthentication FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuthentication>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class UserPreference
    {
        [Newtonsoft.Json.JsonProperty("SubscribedOnReply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubscribedOnReply { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowAdvancedThreadListFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowAdvancedThreadListFilters { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowThreadPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowThreadPreview { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowThreadPreviewCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShowThreadPreviewCount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserPreference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPreference>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class UserProfileImageCoordinates
    {
        [Newtonsoft.Json.JsonProperty("X1Coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? X1Coordinate { get; set; }

        [Newtonsoft.Json.JsonProperty("Y1Coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Y1Coordinate { get; set; }

        [Newtonsoft.Json.JsonProperty("X2Coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? X2Coordinate { get; set; }

        [Newtonsoft.Json.JsonProperty("Y2Coordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Y2Coordinate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserProfileImageCoordinates FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfileImageCoordinates>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class PagingParameters
    {
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PagingParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagingParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class SortParameters
    {
        [Newtonsoft.Json.JsonProperty("OrderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy { get; set; }

        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortParametersDirection? Direction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SortParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class PagedResultOfIResource
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Message> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalResultCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResultCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PagedResultOfIResource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfIResource>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class MessageAction
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageActionAction? Action { get; set; }

        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MessageAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class PagedResultOfContent
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Content> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalResultCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResultCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PagedResultOfContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfContent>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class Content
    {
        [Newtonsoft.Json.JsonProperty("ContentKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid ContentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Metadata> Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("LanguageLocale", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LanguageLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("AppliesToLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppliesToLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("AppliesToValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppliesToValue { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User LastModifiedByUser { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ContentProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentMessage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContentMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("Tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("LastReplyUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User LastReplyUser { get; set; }

        [Newtonsoft.Json.JsonProperty("LastReplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastReplyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("IsAnswered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAnswered { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSticky", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSticky { get; set; }

        [Newtonsoft.Json.JsonProperty("ViewCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ViewCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ReplyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReplyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ModeratorReplyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModeratorReplyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("IsHidden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHidden { get; set; }

        [Newtonsoft.Json.JsonProperty("IsAbuse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAbuse { get; set; }

        [Newtonsoft.Json.JsonProperty("IsClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClosed { get; set; }

        [Newtonsoft.Json.JsonProperty("IsLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLocked { get; set; }

        [Newtonsoft.Json.JsonProperty("IsNoIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNoIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainsEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEmailObfuscated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmailObfuscated { get; set; }

        [Newtonsoft.Json.JsonProperty("AnsweredMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Message> AnsweredMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("MostHelpfulReply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message MostHelpfulReply { get; set; }

        [Newtonsoft.Json.JsonProperty("ForumId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ForumId { get; set; }

        [Newtonsoft.Json.JsonProperty("Counters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentCounter Counters { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User CreatedByUser { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
        }

        public Message[] MessageTemp;
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class Metadata
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Key { get; set; }

        [Newtonsoft.Json.JsonProperty("LanguageLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("ParentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ParentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("ParentShortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentShortName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Metadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Metadata>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class ContentCounter
    {
        [Newtonsoft.Json.JsonProperty("Answers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Answers { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ContentKey { get; set; }

        [Newtonsoft.Json.JsonProperty("HelpfulVotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HelpfulVotes { get; set; }

        [Newtonsoft.Json.JsonProperty("Interested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Interested { get; set; }

        [Newtonsoft.Json.JsonProperty("Replies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Replies { get; set; }

        [Newtonsoft.Json.JsonProperty("Subscribe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Subscribe { get; set; }

        [Newtonsoft.Json.JsonProperty("ViewCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ViewCount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentCounter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentCounter>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public partial class ContentAction
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentActionAction? Action { get; set; }

        [Newtonsoft.Json.JsonProperty("Attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContentAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum Direction
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum RecordContentStatisticsContentType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum RecordContentStatisticsStatisticsType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum SortParametersDirection
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum MessageActionAction
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _23 = 23,

        _24 = 24,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _32 = 32,

        _35 = 35,

        _36 = 36,

        _37 = 37,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.11.6284.26855")]
    public enum ContentActionAction
    {
        _7 = 7,

        _8 = 8,

        _11 = 11,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _31 = 31,

        _33 = 33,

        _34 = 34,

        _39 = 39,

        _85 = 85,

        _86 = 86,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.12.6284.27589")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }


    public class MessageCreateReply
    {
        public System.Guid Id { get; set; }
    }

}